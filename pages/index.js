import Head from "next/head"
import Image from "next/image"
import styles from "../styles/Home.module.css"

//react
import { useState, useEffect } from "react"

//material-ui
import { Box, Grid, Paper, Typography, Button } from "@mui/material"

//component
import CalcButton from "../components/Button"

const Values = [
  { value: "7", operation: "number" },
  { value: "8", operation: "number" },
  { value: "9", operation: "number" },
  { value: "DEL", operation: "delete" },
  { value: "4", operation: "number" },
  { value: "5", operation: "number" },
  { value: "6", operation: "number" },
  { value: "+", operation: "operation" },
  { value: "1", operation: "number" },
  { value: "2", operation: "number" },
  { value: "3", operation: "number" },
  { value: "-", operation: "operation" },
  { value: ".", operation: "number" },
  { value: "0", operation: "number" },
  { value: "/", operation: "operation" },
  { value: "x", operation: "operation" },
]

export default function Home() {
  //calculation values and operation state
  const [calculation, setCalculation] = useState({
    num01: "",
    num02: "",
    operation: "",
  })

  //what is displayed on screen
  const [input, setInput] = useState({
    current: "",
    prev: "",
  })

  //result of calculation operation
  const [result, setResult] = useState(null)

  function updateDisplay() {}

  function AC() {
    setCalculation({
      num01: "",
      num02: "",
      operation: "",
    })

    setInput({
      current: "",
      prev: "",
    })

    setResult(null)
  }

  async function compute() {
    switch (calculation.operation) {
      case "+":
        let result =
          parseFloat(calculation.num01) + parseFloat(calculation.num02)
        setResult(result)
        setCalculation({ num01: result.toString() , num02: "", operation: "" })
        break

      case "-":
        let result02 =
          parseFloat(calculation.num01) - parseFloat(calculation.num02)
        setResult(result02)
        setCalculation({ num01: result02.toString() , num02: "", operation: "" })
        break

      case "/":
        let result03 =
          parseFloat(calculation.num01) / parseFloat(calculation.num02)
        setResult(result03)
        setCalculation({ num01: result03.toString() , num02: "", operation: "" })
        break

      case "x":
        let result04 =
          parseFloat(calculation.num01) * parseFloat(calculation.num02)
        setResult(result04)
        setCalculation({ num01: result04.toString() , num02: "", operation: "" })
        break
    }
  }

  function append(buttonContent, buttonType) {
    if (
      buttonType === "number" &&
      calculation.operation === "" &&
      buttonContent !== "."
    ) {
      setCalculation((prev) => ({ ...prev, num01: prev.num01 + buttonContent }))
      //setInput((prev) => ({ ...prev, current: input.current + buttonContent }))
    } else if (
      buttonType === "number" &&
      calculation.operation === "" &&
      !calculation.num01.includes(".")
    ) {
      setCalculation((prev) => ({ ...prev, num01: prev.num01 + buttonContent }))
      //setInput((prev) => ({...prev, current: input.current + buttonContent}))
    } else if (
      buttonType === "operation" &&
      calculation.num01 !== "" &&
      calculation.num02 === ""
    ) {
      setCalculation((prev) => ({ ...prev, operation: buttonContent }))
    } else if (
      buttonType === "number" &&
      calculation.num01 !== "" &&
      calculation.operation !== ""
    ) {
      setCalculation((prev) => ({ ...prev, num02: prev.num02 + buttonContent }))
    }
  }

  function handleClick(e) {
    const buttonType = e.target.id
    const buttonContent = e.target.textContent

    if (buttonType === "number" || buttonType === "operation") {
      append(buttonContent, buttonType)
    }
    if (buttonType === "execute") {
      compute()
    }
    if (buttonType === "AC") {
      AC()
    }
  }

  //updates current view
  useEffect(() => {
    
    setInput((prev) => ({
      ...prev,
      current: `${calculation.num01} ${calculation.operation} ${calculation.num02}`,
    }))    

    return
  }, [calculation, result])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box component="main" className="calculator">
        <Grid
          container
          sx={{
            p: { phone: 2, tablet: 4 },
            py: { phone: 4, tablet: 8 },
            border: "1px solid black",
            borderRadius: "10px",
            mx: { phone: "auto" },
            my: 5,
            maxWidth: { phone: "90%", tablet: "390px" },
          }}
        >
          <Grid item phone={12} className="title">
            calc
          </Grid>

          <Grid item phone={12} className="displayBox" sx={{ mx: "auto" }}>
            <Paper elevation={0}>
              <Box
                component="div"
                className="view01"
                sx={{
                  px: 3,
                  py: 4,
                  my: 1,
                  backgroundColor: "grey.500",
                  width: "100%",
                }}
              >
                {input.current}
              </Box>
            </Paper>
          </Grid>

          <Grid item container className=" valueInput" sx={{ mx: "auto" }}>
            {Values.map((item) => (
              <Grid key={item.value} item phone={3} sx={{ my: 1 }}>                
                  <CalcButton
                    value={item.value}
                    type={item.operation}
                    handleClick={handleClick}
                  />                
              </Grid>
            ))}

            <Grid item phone={6}>
              <Button
                id="AC"
                sx={{ backgroundColor: "black" }}
                variant="contained"
                color="primary"
                onClick={(e) => handleClick(e)}
              >
                <Typography variant="body2" id="AC" sx={{ color: "white" }}>
                  RESET
                </Typography>
              </Button>
            </Grid>

            <Grid item phone={6}>
              <Button
                id="execute"
                sx={{ backgroundColor: "black" }}
                variant="contained"
                color="primary"
                onClick={(e) => handleClick(e)}
              >
                <Typography
                  variant="body2"
                  id="execute"
                  sx={{ color: "white" }}
                >
                  =
                </Typography>
              </Button>
            </Grid>
          </Grid>
        </Grid>
      </Box>
    </>
  )
}
